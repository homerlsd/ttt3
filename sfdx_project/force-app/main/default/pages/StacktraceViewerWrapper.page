<apex:page showHeader="true" sidebar="false" standardController="Log__c" extensions="StacktraceViewerWrapperController"
           lightningStyleSheets="true">
    <base href="/apex/StacktraceViewerWrapper"/>
    <apex:slds />
    <apex:outputPanel rendered="{!log.Type__c == 'ProcessBuilderException'}">
        <style>
            html,
            body {
                height: 100%;
                overflow: hidden;
            }
            .local-host-label {
                position: fixed;
                top: 0;
                right: 0;
                background-color: #ef4646;
                color: #fff;
                padding: 0 7px;
                z-index: 99999;
            }
        </style>
        <script>
            window.onload = function() {
                document.body.classList.remove('sfdcBody');
            };
            const stackTraceParceResult = '{!JSENCODE(log.Stacktrace_Parse_Result__c)}';
            const logId = '{!JSENCODE(log.Id)}';
            window.APP_CONFIG = {
                sldsIconsPath: "/apexpages/slds/latest/assets/icons",
                assetsPath: "{!URLFOR($Resource.processbuilderapp, 'assets')}",
                stackTraceParceResult: stackTraceParceResult,
                packageNamespace: JSON.stringify('{!packageNamespace}'),
                logId: logId
            };
        </script>
        <div class="slds slds-scope">
            <grs-root></grs-root>
            <apex:outputPanel layout="none" rendered="{!isDev}">
                <div class="local-host-label">http://localhost:4200</div>
                <script type="text/javascript" src="https://localhost:4200/runtime.js"></script>
                <script type="text/javascript" src="https://localhost:4200/polyfills.js"></script>
                <script type="text/javascript" src="https://localhost:4200/styles.js"></script>
                <script type="text/javascript" src="https://localhost:4200/vendor.js"></script>
                <script type="text/javascript" src="https://localhost:4200/main.js"></script>
            </apex:outputPanel>
            <apex:outputPanel layout="none" rendered="{!NOT(isDev)}">
                <apex:stylesheet value="{!URLFOR($Resource.processbuilderapp, 'styles.css')}"/>
                <script src="{!URLFOR($Resource.processbuilderapp, 'runtime.js')}"/>
                <script src="{!URLFOR($Resource.processbuilderapp, 'polyfills.js')}"/>
                <script src="{!URLFOR($Resource.processbuilderapp, 'main.js')}"/>
            </apex:outputPanel>
        </div>
    </apex:outputPanel>
    <apex:outputPanel rendered="{!log.Type__c != 'ProcessBuilderException'}">
        <script src="{!URLFOR($Resource.libs, '/libs/run_prettify.js')}"/>
        <script src="{!URLFOR($Resource.libs, '/libs/handlebars.4.0.11.js')}"/>
        <style>
            ol.linenums {
                padding-left: 0;
            }
            ol.linenums li {
                margin-left: 4em;
                width: 200%;
            }
            .c-box {
                font-size: 12px;
                overflow-y: auto;
            }
            .c-parse-result-item {
                padding-bottom: 15px;
            }
            .c-raw-stacktrace {
                font-size: 14px;
            }
        </style>
        <div class="c-container"></div>
        <div class="c-line-number-style-container"></div>
        <script id="item-template" type="text/x-handlebars-template">
            <div class="c-parse-result-item">
                <h1>
                    {{#if id}}
                        <a href="/{{id}}" target="_blank">{{className}}</a> ({{lineNumber}})
                    {{else}}
                        {{className}}</a> ({{lineNumber}})
                    {{/if}}
                </h1>
                {{#if hunk}}
                    <pre class="c-box c-box-{{index}} prettyprint linenums:{{hunkFirstLineNumber}} lang-java"> {{{hunk}}}</pre>
                {{else}}
                    <pre class="c-box c-box-{{index}} prettyprint lang-java">Code not found</pre>
                {{/if}}
            </div>
        </script>
        <script>
            const container = document.querySelector('.c-container');
            const itemTemplate = Handlebars.compile(document.getElementById("item-template").innerHTML);
            const stackTraceParceResult = '{!JSENCODE(log.Stacktrace_Parse_Result__c)}';

            function buildItemView(pItem) {
                const htmlPart = itemTemplate(pItem);
                container.insertAdjacentHTML('beforebegin', htmlPart);
                if (pItem.lineNumber && pItem.hunk) {
                    const firstLineNumber = parseInt(pItem.hunkFirstLineNumber);
                    const styleContainer = document.querySelector('.c-line-number-style-container');
                    styleContainer.insertAdjacentHTML('beforebegin', `<style type='text/css'>.c-box-${pItem.index} li:nth-child(${(pItem.lineNumber - firstLineNumber + 1)}) { background: yellow; } </style>`);
                }
            }

            window.onload = function () {
                let pResults = null;
                try {
                    pResults = JSON.parse(stackTraceParceResult);
                } catch (err) {
                }
                if (Array.isArray(pResults) && pResults.length > 0) {
                    let idx = 0;
                    for (const pItem of pResults) {
                        pItem.index = idx;
                        buildItemView(pItem);
                        idx++;
                    }
                    PR.prettyPrint();
                } else {
                    if (stackTraceParceResult && Array.isArray(stackTraceParceResult)) {
                        container.innerText = stackTraceParceResult;
                    } else {
                        container.innerText = 'Stacktrace Parse Results are unavailable.';
                    }
                }
            };
        </script>
    </apex:outputPanel>
</apex:page>