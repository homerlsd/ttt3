public with sharing class ConnectedOrgService {

    public static final Set<String> CONNECTED_ORG_TYPES = new Set<String> {
        'production',
        'sandbox'
    };

    public static final String BROADCAST_SEND_TO = 'sendTo';
    public static final String BROADCAST_RECEIVE_FROM = 'receiveFrom';
    public static final String SOURCE_QUICK_START = 'QuickStart';

    public static List<Connected_Org__c> getConnectedOrgsList() {

        List<Connected_Org__c> corgs = Connected_Org__c.getAll().values();

        List<Connected_Org__c> filteredCOrgs = new List<Connected_Org__c>();
        for (Connected_Org__c corg : cOrgs) {
            if (corg.Name.length() <= 18) {
                filteredCOrgs.add(corg);
            }
        }

        return filteredCOrgs;
    }

    public static Connected_Org__c getPassthroughConnectedOrg() {
        Connected_Org__c result;
        String connectionId = ConfigUtil.CONNECTED_ORGS_SETTINGS.Passthrought_Email__c;
        // get selected connection
        if(String.isNotBlank(connectionId)) {
            result = getConnectedOrgById(connectionId);
        }
        // else get first exist external connection
        if(result == null) {
            for(Connected_Org__c corg : getConnectedOrgsList()) {
                if(corg.Name != UserInfo.getOrganizationId().left(15)) {
                    result = corg;
                    break;
                }
            }
        }
        return result;
    }

    public static List<Connected_Org__c> getDataDirectionConnectedOrgs(String dataDirection) {
        List<Connected_Org__c> result = new List<Connected_Org__c>();
        for (Connected_Org__c corg : getConnectedOrgsList()) {
            if (corg.Data_Direction__c == dataDirection) {
                result.add(corg);
            }
        }
        return result;
    }

    public static List<Connected_Org__c> getBroadcastConnectedOrgs(String dataDirection) {
        List<Connected_Org__c> result = new List<Connected_Org__c>();
        for (Connected_Org__c corg : getConnectedOrgsList()) {
            if (corg.Data_Direction__c == dataDirection) {
                result.add(corg);
            }
        }
        return result;
    }

    public static List<AdminService.ConnectedOrgDTO> getQSAnotherConnectedOrg() {
        List<AdminService.ConnectedOrgDTO> result = new List<AdminService.ConnectedOrgDTO>();
        for(Connected_Org__c corg : getConnectedOrgsList()) {
            if(corg.Source__c == SOURCE_QUICK_START) {
                result.add(new AdminService.ConnectedOrgDTO(corg));
                break;
            }
        }
        return result;
    }

    public static Boolean isMyDomainEnabled() {
        Boolean isMyDomainEnabledCheck1 = URL.getSalesforceBaseUrl().getHost().contains('--');
        Boolean isMyDomainEnabledCheck2 = URL.getSalesforceBaseUrl().getHost().endsWith('my.salesforce.com');
        return isMyDomainEnabledCheck1 || isMyDomainEnabledCheck2;
    }

    public static Boolean isSelfConnectedOrg(Connected_Org__c corg) {
        return (corg.Name == UserInfo.getOrganizationId().left(15)
            && corg.Instance_Url__c == System.Url.getOrgDomainUrl().toExternalForm()
            && isMyDomainEnabled()
            && String.isBlank(corg.Access_Token__c));
    }

    public static String getConnectedOrgAccessToken(Connected_Org__c corg) {
        if(isSelfConnectedOrg(corg)) {
            return UserInfo.getSessionId();
        }
        return getDecryptedTokenFromCache(corg);
    }

    public static Connected_Org__c createSelfConnectedOrg(String name, String description) {
        Connected_Org__c newCorg = new Connected_Org__c(
            Name = UserInfo.getOrganizationId().left(15),
            Title__c = name,
            Description__c = description,
            Type__c = ConfigUtil.currentOrgIsSandbox ? 'sandbox' : 'production',
            Instance_Url__c = System.Url.getOrgDomainUrl().toExternalForm()
        );

        PermissionsUtil.performInsertDML(new List<Connected_Org__c>{newCorg}, Schema.sObjectType.Connected_Org__c);

        return newCorg;
    }

    public static Connected_Org__c createConnectedOrg(String name, String type) {
        return createConnectedOrg(name, type, null, null, null);
    }

    public static Connected_Org__c createConnectedOrg(String name, String type, String description, String source, String dataDirection) {

        if (!CONNECTED_ORG_TYPES.contains(type)) {
            throw new ConnectedOrgServiceException('Invalid Connected Org type: ' + type);
        }

        String uniqueCode = ConfigUtil.generateUUID4();

        Connected_Org__c newCorg = new Connected_Org__c(
            Name = uniqueCode,
            Title__c = name,
            Description__c = description,
            Type__c = type,
            Access_Token__c = null,
            Refresh_Token__c = null,
            Token_Refreshed_At__c = null,
            Instance_Url__c = null,
            Identity_Url__c = null,
            Source__c = source,
            Data_Direction__c = dataDirection
        );

        PermissionsUtil.performInsertDML(new List<Connected_Org__c>{newCorg}, Schema.sObjectType.Connected_Org__c);

        return newCorg;
    }

    public static Connected_Org__c getConnectedOrgById(String orgId) {
        Connected_Org__c corg = Connected_Org__c.getInstance(orgId.left(15));
        return corg;
    }

    public static Connected_Org__c updateConnectedOrg(Connected_Org__c corg) {
        return null;
    }

    public static void deleteFakeConnectedOrgs() {
        List<Connected_Org__c> cOrgs = Connected_Org__c.getAll().values();
        List<Connected_Org__c> fakeCOrgs = new List<Connected_Org__c>();
        for (Connected_Org__c corg : cOrgs) {
            if (corg.Name.length() > 18) {
                fakeCOrgs.add(corg);
            }
        }
        if(!fakeCOrgs.isEmpty()) {
            PermissionsUtil.performDeleteDML(fakeCOrgs, Schema.sObjectType.Connected_Org__c);
        }
    }

    public static Connected_Org__c generateTokenForConnectedOrg(String codeFromOAuth, Object stateFromOAuth, String redirectUrl) {

        StateDTO state;
        MetadataService.RemoteSiteSetting rssInstance;
        try {
            state = (StateDTO)JSON.deserialize(JSON.serialize(stateFromOAuth), StateDTO.class);
        } catch(Exception e) {
            throw new ConnectedOrgServiceException(ConfigUtil.INVALID_OAUTH_STATE_MESSAGE + state);
        }

        Connected_Org__c corg = Connected_Org__c.getInstance(state.code);
        if (corg == null) {
            throw new ConnectedOrgServiceException(ConfigUtil.CONNECTED_ORG_NOT_FOUND_MESSAGE +  state.code);
        }

        if (!state.loginUrl.contains(ConfigUtil.PRODUCTION_LOGIN_URL) || state.loginUrl.contains(ConfigUtil.SANDBOX_LOGIN_URL)) {
            rssInstance = AdminService.createRemoteSiteSettingInstance('CustomLoginUrl', state.loginUrl, '');
            AdminService.upsertRemoteSiteSettingsMetadata(rssInstance);
        }

        String endpoint = (state.loginUrl.endsWith('/') ? state.loginUrl.removeEnd('/') : state.loginUrl) + ConfigUtil.SF_OAUTH_TOKEN_ENDPOINT;
        HttpUtils.HttpURLParameters bodyParams = new HttpUtils.HttpURLParameters();
        bodyParams.addParameter(HttpUtils.HTTP_URL_PARAM_GRANT_TYPE, HttpUtils.HTTP_URL_PARAM_AUTHORIZATION_CODE);
        bodyParams.addParameter(HttpUtils.HTTP_URL_PARAM_CODE, codeFromOAuth);
        bodyParams.addEncodedParameter(HttpUtils.HTTP_URL_PARAM_CLIENT_ID, ConfigUtil.CONNECTED_ORGS_SETTINGS.Client_Key__c);
        bodyParams.addEncodedParameter(HttpUtils.HTTP_URL_PARAM_CLIENT_SECRET, ConfigUtil.CONNECTED_ORGS_SETTINGS.Client_Secret__c);
        bodyParams.addEncodedParameter(HttpUtils.HTTP_URL_PARAM_REDIRECT_URI, redirectUrl);
        String b = HttpUtils.post(
                endpoint,
                bodyParams.toStringParameters(),
                ConfigUtil.OAUTH_HEADERS_MAP,
                200,
                rssInstance
        );

        AuthTokenResponse resp = (AuthTokenResponse)JSON.deserialize(b, AuthTokenResponse.class);

        String organizationId = resp.id.split('/')[4];
        String organizationId15 = organizationId.left(15);
        Connected_Org__c corgExisting = getConnectedOrgById(organizationId15);
        if (corgExisting != null && corgExisting.Source__c != SOURCE_QUICK_START && corg.Source__c == SOURCE_QUICK_START) {
            throw new ConnectedOrgServiceException('Org with ID ' + organizationId + ' already exists');
        }
        else {
            // allow upsert QuickStart settings
            if((corgExisting != null && corgExisting.Source__c == SOURCE_QUICK_START) || (corg != null && corg.Source__c == SOURCE_QUICK_START)) {
                PermissionsUtil.putSObjectField(corg, Schema.SObjectType.Connected_Org__c.fields.Id, null);
            }
            PermissionsUtil.putSObjectField(corg, Schema.SObjectType.Connected_Org__c.fields.Name, organizationId15);
            PermissionsUtil.putSObjectField(corg, Schema.SObjectType.Connected_Org__c.fields.Access_Token__c, resp.access_token);
            PermissionsUtil.putSObjectField(corg, Schema.SObjectType.Connected_Org__c.fields.Refresh_Token__c, resp.refresh_token);
            PermissionsUtil.putSObjectField(corg, Schema.SObjectType.Connected_Org__c.fields.Private_Key__c, generatePrivateKey(corg));
            PermissionsUtil.putSObjectField(corg, Schema.SObjectType.Connected_Org__c.fields.Instance_Url__c, resp.instance_url);
            PermissionsUtil.putSObjectField(corg, Schema.SObjectType.Connected_Org__c.fields.Identity_Url__c, resp.id);
            PermissionsUtil.putSObjectField(corg, Schema.SObjectType.Connected_Org__c.fields.Token_Refreshed_At__c, Datetime.now());
            PermissionsUtil.putSObjectField(corg, Schema.SObjectType.Connected_Org__c.fields.Is_Sandbox__c, isSandbox(corg));

            putEncryptedTokenToCache(corg);

            try {
                rssInstance = AdminService.createRemoteSiteSettingInstance(
                    'Pharos_ai_Connected_Org_' + organizationId15,
                    resp.instance_url,
                    'Pharos.ai login URL for connected org ' + corg.Title__c + ' (' + organizationId15 + ')'
                );
                AdminService.upsertRemoteSiteSettingsMetadata(rssInstance);
                if(corgExisting != null && corgExisting.Source__c == SOURCE_QUICK_START) {
                    PermissionsUtil.performUpdateDML(new List<Connected_Org__c>{corg}, Schema.sObjectType.Connected_Org__c);
                }
                else if (corg != null) {
                    PermissionsUtil.performUpsertDML(new List<Connected_Org__c>{corg}, Schema.sObjectType.Connected_Org__c);
                }
            }
            catch(Exception e) {
                throw new ConnectedOrgServiceException('RemoteSiteSetting creation error: ' + e.getMessage());
            }
            return corg;
        }

    }

    public static Boolean isSandbox(Connected_Org__c corg) {
        Boolean result = false;
        String query = new QBuilder(Organization.SObjectType)
            .selectFields(new Set<String>{Schema.sObjectType.Organization.fields.IsSandbox.getName()})
            .addLimit(1)
            .build();
        try {
            List<Organization> objectList = (List<Organization>)JSON.deserialize(JSON.serialize(LogPostProcessingService.runQuery(corg, query)), List<Organization>.class);
            result = (!objectList.isEmpty() && objectList.get(0).IsSandbox);
        }
        catch(Exception e) {}
        return result;
    }

    public static Connected_Org__c refreshToken(String orgId) {
        Connected_Org__c corg = getConnectedOrgById(orgId);

        if (corg == null) {
            throw new ConnectedOrgServiceException(ConfigUtil.getConnectedOrgNotSetError(orgId));
        }
        return refreshToken(corg);
    }

    public static Connected_Org__c refreshToken(Connected_Org__c corg) {

        if(isSelfConnectedOrg(corg)) return corg;

        /** IMPORTANT This method doesn't update Connected Org in DB to prevent "You have uncommitted work pending." issue
         *  Please do unpdate manualy after this method
        */

        String endpoint = corg.Instance_Url__c + ConfigUtil.SF_OAUTH_TOKEN_ENDPOINT;
        HttpUtils.HttpURLParameters bodyParams = new HttpUtils.HttpURLParameters();
        bodyParams.addParameter(HttpUtils.HTTP_URL_PARAM_GRANT_TYPE, HttpUtils.HTTP_URL_PARAM_REFRESH_TOKEN);
        bodyParams.addEncodedParameter(HttpUtils.HTTP_URL_PARAM_REFRESH_TOKEN, corg.Refresh_Token__c);
        bodyParams.addEncodedParameter(HttpUtils.HTTP_URL_PARAM_CLIENT_ID, ConfigUtil.CONNECTED_ORGS_SETTINGS.Client_Key__c);
        bodyParams.addEncodedParameter(HttpUtils.HTTP_URL_PARAM_CLIENT_SECRET, ConfigUtil.CONNECTED_ORGS_SETTINGS.Client_Secret__c);
        String b = HttpUtils.post(
                endpoint,
                bodyParams.toStringParameters(),
                ConfigUtil.OAUTH_HEADERS_MAP,
                200
        );

        AuthTokenResponse resp = (AuthTokenResponse)JSON.deserialize(b, AuthTokenResponse.class);

        PermissionsUtil.putSObjectField(corg, Schema.SObjectType.Connected_Org__c.fields.Access_Token__c, resp.access_token);
        PermissionsUtil.putSObjectField(corg, Schema.SObjectType.Connected_Org__c.fields.Token_Refreshed_At__c, Datetime.now());
        if (String.isBlank(corg.Private_Key__c)) {
            PermissionsUtil.putSObjectField(corg, Schema.SObjectType.Connected_Org__c.fields.Private_Key__c, generatePrivateKey(corg));
        }
        putEncryptedTokenToCache(corg);

        // upsert corg;
        // NOTE: Return unsaved Connected_Org__c to save it latter due to "You have uncommitted work pending."

        return corg;

    }

    public static String generatePrivateKey(Connected_Org__c corg) {
        return EncodingUtil.base64Encode(Crypto.generateDigest('SHA3-256', Blob.valueOf(String.valueOf(corg.Id) + String.valueOf(System.now().getTime()) + String.valueOf(ConfigUtil.generateUUID4()))));
    }

    public static void putEncryptedTokenToCache(Connected_Org__c corg) {
        try {
            if (String.isNotBlank(corg.Access_Token__c)) {
                String keyCache = CacheUtils.buildCacheKey(CacheUtils.KEY_REQUEST_ENCRYPTED_TOKEN, corg.Name, String.valueOf(corg.Token_Refreshed_At__c.getTime()));
                Boolean isCacheAvailableForKey = CacheUtils.isCacheAvailableForKey(CacheUtils.KEY_REQUEST_ENCRYPTED_TOKEN, keyCache);
                if (isCacheAvailableForKey) {
                    Blob encryptedToken = Crypto.encryptWithManagedIV('AES256', EncodingUtil.base64Decode(corg.Private_Key__c), Blob.valueOf(corg.Access_Token__c));
                    CacheUtils.putCacheValue(keyCache, encryptedToken, CacheUtils.getTTLValue(CacheUtils.KEY_REQUEST_ENCRYPTED_TOKEN));
                }
            }
        } catch (Exception e) {
            Logger.getInstance().internalError(e, corg.Name, true, ConnectedOrgService.class.getName(), 'encryptToken');
        }
    }

    public static String getDecryptedTokenFromCache(Connected_Org__c corg) {
        try {
            String keyCache = CacheUtils.buildCacheKey(CacheUtils.KEY_REQUEST_ENCRYPTED_TOKEN, corg.Name, String.valueOf(corg.Token_Refreshed_At__c.getTime()));
            Boolean isCacheAvailableForKey = CacheUtils.isCacheAvailableForKey(CacheUtils.KEY_REQUEST_ENCRYPTED_TOKEN, keyCache);
            if (isCacheAvailableForKey) {
                Object cacheObject = CacheUtils.getCacheValue(keyCache);
                if (cacheObject != null) {
                    Blob decryptedToken = Crypto.decryptWithManagedIV('AES256', EncodingUtil.base64Decode(corg.Private_Key__c), (Blob)cacheObject);
                    return decryptedToken.toString();
                }
            }
        } catch (Exception e) {
            Logger.getInstance().internalError(e, corg.Name, true, ConnectedOrgService.class.getName(), 'decryptToken');
        }
        return corg.Access_Token__c;
    }

    public static Boolean testConnection(String orgId) {
        try {
            getIdentity(orgId);
        } catch (Exception e) {
            return false;
        }
        return true;

    }

    public static Object getIdentity(String orgId) {

        Connected_Org__c corg = getConnectedOrgById(orgId);

        if (corg == null) {
            throw new ConnectedOrgServiceException(ConfigUtil.getConnectedOrgNotSetError(orgId));
        }

        String b = HttpUtils.get(
            corg.Identity_Url__c,
            ConfigUtil.getSFRestAPIHeaders(ConnectedOrgService.getConnectedOrgAccessToken(corg)),
            200
        );

        IdentityDTO identity = (IdentityDTO)JSON.deserialize(b, IdentityDTO.class);
        return identity;
    }

    public class IdentityDTO {
        public String id;
        public String user_id;
        public String organization_id;
        public String username;
        public String nick_name;
        public String display_name;
        public String email;
        public String first_name;
        public String last_name;
        public String timezone;
        public Boolean active;
        public String user_type;
        public String language;
        public String locale;
    }

    public class StateDTO {
        public String code;
        public String loginUrl;
        public String redirectUrl;
    }

    public class AuthTokenResponse {
        public String access_token;
        public String refresh_token;
        public String signature;
        public String scope;
        public String instance_url;
        public String id;
        public String token_type;
        public String issued_at;
        public AuthTokenResponse(){}
    }

    public class ConnectedOrgServiceException extends Exception {}

}